(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{556:function(e,r,o){"use strict";o.r(r);var i=o(45),s=Object(i.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"promise-方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#promise-方法"}},[e._v("#")]),e._v(" Promise 方法")]),e._v(" "),o("p",[e._v("在JavaScript中，Promise对象除了一些常用的属性之外，还提供了一些方法，这些方法主要用于管理异步操作并处理异步操作的结果和错误。以下是Promise对象的一些常用方法的详解：")]),e._v(" "),o("p",[e._v("Promise.all(iterable)：该方法接收一个可迭代对象，例如数组或者Set对象，其中的每个元素都是一个Promise对象，返回一个新的Promise对象。当所有的Promise对象都变为fulfilled状态时，新的Promise对象的状态也会变成fulfilled状态，并返回一个包含所有Promise对象的结果的数组，如果其中任何一个Promise对象变为rejected状态，新的Promise对象的状态就会变成rejected状态，返回的是最先被rejected的Promise对象的错误信息。")]),e._v(" "),o("p",[e._v("Promise.race(iterable)：该方法接收一个可迭代对象，例如数组或者Set对象，其中的每个元素都是一个Promise对象，返回一个新的Promise对象。当其中任何一个Promise对象的状态变为fulfilled或rejected时，新的Promise对象的状态也会变成相应的状态，返回的是最先变为fulfilled或rejected状态的Promise对象的结果或错误信息。")]),e._v(" "),o("p",[e._v("Promise.resolve(value)：该方法返回一个状态为fulfilled的Promise对象，并将传入的参数作为Promise对象的结果。")]),e._v(" "),o("p",[e._v("Promise.reject(reason)：该方法返回一个状态为rejected的Promise对象，并将传入的参数作为Promise对象的错误信息。")]),e._v(" "),o("p",[e._v("Promise.prototype.then(onFulfilled, onRejected)：该方法用于处理异步操作成功后的结果，可以接收两个回调函数参数，第一个参数onFulfilled是异步操作成功后的回调函数，第二个参数onRejected是异步操作失败时的回调函数，如果第二个参数不传，则会默认处理异步操作失败的错误。返回一个新的Promise对象，用于控制下一个then()方法的执行结果。")]),e._v(" "),o("p",[e._v("Promise.prototype.catch(onRejected)：该方法用于处理异步操作失败时的结果，只接收一个参数，即异步操作失败的回调函数。返回一个新的Promise对象。")]),e._v(" "),o("p",[e._v("Promise.prototype.finally(onFinally)：该方法用于指定不管Promise对象的状态如何，都会执行的回调函数，可以使用它来执行一些清理操作，比如关闭数据库连接或释放资源。只接收一个参数，即指定的回调函数。该方法不会改变Promise对象的状态，也不会传递任何值给下一个Promise对象，它返回的是一个新的Promise对象。")]),e._v(" "),o("p",[e._v("总之，Promise对象提供了一些方法来管理异步操作并处理异步操作的结果和错误，可以使用它们来创建新的Promise对象、并发执行多个Promise对象、处理Promise对象的状态改变等。在实际应用中，我们可以根据需要选择不同的方法来实现异步操作的管理和结果处理。")])])}),[],!1,null,null,null);r.default=s.exports}}]);