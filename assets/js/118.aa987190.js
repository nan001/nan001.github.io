(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{559:function(e,o,r){"use strict";r.r(o);var s=r(45),t=Object(s.a)({},(function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"promise-原型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise-原型"}},[e._v("#")]),e._v(" Promise 原型")]),e._v(" "),r("p",[e._v("在JavaScript中，每个对象都有一个原型（prototype）属性，指向其原型对象。Promise对象也不例外，它的原型对象是一个对象，其中包含一些方法用于操作Promise对象。")]),e._v(" "),r("p",[e._v("以下是Promise对象原型上的一些常用方法：")]),e._v(" "),r("p",[e._v("Promise.prototype.then(onFulfilled, onRejected)：用于处理异步操作成功后的结果，可以接收两个回调函数参数，第一个参数onFulfilled是异步操作成功后的回调函数，第二个参数onRejected是异步操作失败时的回调函数，如果第二个参数不传，则会默认处理异步操作失败的错误。返回一个新的Promise对象，用于控制下一个then()方法的执行结果。")]),e._v(" "),r("p",[e._v("Promise.prototype.catch(onRejected)：用于处理异步操作失败时的结果，只接收一个参数，即异步操作失败的回调函数。返回一个新的Promise对象。")]),e._v(" "),r("p",[e._v("Promise.prototype.finally(onFinally)：用于指定不管Promise对象的状态如何，都会执行的回调函数，可以使用它来执行一些清理操作，比如关闭数据库连接或释放资源。只接收一个参数，即指定的回调函数。该方法不会改变Promise对象的状态，也不会传递任何值给下一个Promise对象，它返回的是一个新的Promise对象。")]),e._v(" "),r("p",[e._v("Promise.prototype.catch(onRejected)：用于处理异步操作失败时的结果，只接收一个参数，即异步操作失败的回调函数。返回一个新的Promise对象。")]),e._v(" "),r("p",[e._v('Promise.prototype.toString()：返回一个表示Promise对象的字符串，格式为"[object Promise]"。')]),e._v(" "),r("p",[e._v('Promise.prototype[Symbol.toStringTag]：返回一个表示Promise对象的字符串标识符，可以用于自定义对象的类型标识。默认情况下，它的值为"Promise"。')]),e._v(" "),r("p",[e._v("Promise对象的原型方法可以帮助我们方便地处理异步操作的结果和错误，并实现链式调用，让我们的代码更加简洁和易于维护。在实际应用中，我们可以根据需要使用不同的Promise对象方法来实现异步操作的管理和结果处理。")]),e._v(" "),r("p",[e._v("Promise.prototype.all(iterable)：用于将多个Promise对象包装成一个新的Promise对象，等待所有Promise对象都变为resolved状态后，返回一个由所有Promise对象的结果组成的数组。如果其中有一个Promise对象变为rejected状态，则直接进入catch()方法处理错误。接收一个可迭代对象作为参数，可以是数组、Set等。")]),e._v(" "),r("p",[e._v("Promise.prototype.race(iterable)：用于将多个Promise对象包装成一个新的Promise对象，等待其中任何一个Promise对象变为resolved或rejected状态后，返回该Promise对象的结果。接收一个可迭代对象作为参数，可以是数组、Set等。")]),e._v(" "),r("p",[e._v("Promise.prototype.allSettled(iterable)：用于将多个Promise对象包装成一个新的Promise对象，等待所有Promise对象都变为settled状态后，返回一个由所有Promise对象的结果组成的数组，每个结果都是一个对象，包含status属性表示Promise对象的状态，value属性表示Promise对象的结果（如果状态为resolved），reason属性表示Promise对象的错误信息（如果状态为rejected）。接收一个可迭代对象作为参数，可以是数组、Set等。")]),e._v(" "),r("p",[e._v("Promise.resolve(value)：用于将一个非Promise对象转化为Promise对象，返回一个Promise对象，状态为resolved，值为value。")]),e._v(" "),r("p",[e._v("Promise.reject(reason)：用于将一个原因（reason）转化为Promise对象，返回一个Promise对象，状态为rejected，值为reason。")]),e._v(" "),r("p",[e._v("Promise.allSettled(iterable)：用于将多个Promise对象包装成一个新的Promise对象，等待所有Promise对象都变为settled状态后，返回一个由所有Promise对象的结果组成的数组，每个结果都是一个对象，包含status属性表示Promise对象的状态，value属性表示Promise对象的结果（如果状态为resolved），reason属性表示Promise对象的错误信息（如果状态为rejected）。接收一个可迭代对象作为参数，可以是数组、Set等。")]),e._v(" "),r("p",[e._v("以上是Promise对象原型上的一些常用方法，可以帮助我们更加方便地使用Promise对象处理异步操作的结果和错误。在实际应用中，我们可以根据需要选择合适的方法来实现代码的逻辑和流程。")])])}),[],!1,null,null,null);o.default=t.exports}}]);