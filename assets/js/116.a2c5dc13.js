(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{558:function(e,o,r){"use strict";r.r(o);var s=r(45),i=Object(s.a)({},(function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"promise-属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise-属性"}},[e._v("#")]),e._v(" Promise 属性")]),e._v(" "),r("p",[e._v("在JavaScript中，Promise是一种内置对象，提供了一些属性和方法来帮助我们管理异步操作。以下是Promise对象的常用属性的详解：")]),e._v(" "),r("p",[e._v("Promise.prototype：这是一个属性，它是所有Promise实例的原型对象，可以向它添加自定义方法和属性。")]),e._v(" "),r("p",[e._v("Promise.prototype.constructor：这是一个指向Promise构造函数的属性，可以用它来创建新的Promise实例。")]),e._v(" "),r("p",[e._v("Promise.prototype.then()：这是Promise对象的主要方法之一，用于处理异步操作成功后的结果，可以接收两个参数，第一个参数是异步操作成功后的回调函数，第二个参数是异步操作失败时的回调函数，返回一个新的Promise对象，用于控制下一个then()方法的执行结果。")]),e._v(" "),r("p",[e._v("Promise.prototype.catch()：这也是Promise对象的主要方法之一，用于处理异步操作失败时的结果，只接收一个参数，即异步操作失败的回调函数，返回一个新的Promise对象。")]),e._v(" "),r("p",[e._v("Promise.prototype.finally()：这是一个新的方法，用于指定不管Promise对象的状态如何，都会执行的回调函数，可以使用它来执行一些清理操作。")]),e._v(" "),r("p",[r("code",[e._v("Promise.prototype[Symbol.toStringTag]")]),e._v("：这是一个属性，它返回一个表示Promise对象的字符串标识，用于标识Promise对象的类型。")]),e._v(" "),r("p",[e._v("除了上述常用属性之外，Promise还提供了一些静态方法，这些方法不是在Promise的原型对象上定义的，而是在Promise构造函数对象上定义的。以下是Promise构造函数的一些静态方法：")]),e._v(" "),r("p",[e._v("Promise.all()：这是一个静态方法，用于并发执行多个Promise对象，并等待所有Promise对象都成功返回结果后才返回一个新的Promise对象，这个新的Promise对象的结果是一个包含所有Promise对象结果的数组。")]),e._v(" "),r("p",[e._v("Promise.race()：这是一个静态方法，用于并发执行多个Promise对象，并等待任意一个Promise对象成功返回结果后就返回一个新的Promise对象，这个新的Promise对象的结果是最先成功的Promise对象的结果。")]),e._v(" "),r("p",[e._v("Promise.resolve()：这是一个静态方法，用于返回一个状态为fulfilled的Promise对象，它的结果为传入的参数。")]),e._v(" "),r("p",[e._v("Promise.reject()：这是一个静态方法，用于返回一个状态为rejected的Promise对象，它的结果为传入的错误对象。")]),e._v(" "),r("p",[e._v("总之，Promise对象有一些常用属性和静态方法，用于管理异步操作并处理异步操作的结果和错误。我们可以通过它们来创建新的Promise对象、处理Promise对象的状态改变、并发执行多个Promise对象等。")])])}),[],!1,null,null,null);o.default=i.exports}}]);